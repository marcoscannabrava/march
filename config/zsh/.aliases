# common-sense ls we all want
alias la='ls -lAFhS --group-directories-first'

alias python=python3

# Show git aliases from oh-my-zsh git plugin
alias gitaliases='less ~/.oh-my-zsh/plugins/git/README.md'
alias aliases='vim ~/.aliases'

# Override oh-my-zsh git plugin gfa alias to fetch all and rebase current branch
alias gfa='git fetch --all --tags --prune && git rebase'

# gcof alias to use checkout with fzf 
# TODO: instead of an alias, tab completion of the git checkout should call fzf
# https://thevaluable.dev/zsh-completion-guide-examples/
alias gcof='git checkout $(git branch | fzf)'

function gcommit() {
    # e.g. git commits the parsed name of the current branch "marcoscannabrava/something/ticketcode" -> "something / ticketcode"
    if [[ `current_branch` == "marcoscannabrava"* ]]; then
        g c "$(current_branch | sed -E 's,(marcoscannabrava/)?([^/]*)/(.*),\2 / \3,g' | sed -e 's,-, ,g')"
    # e.g. git commits the parsed name of the current branch "mc/feat/something" -> "feat: something"
    else
        g c "$(current_branch | sed -E 's,(mc/)?([^/]*)/(.*),\2: \3,g' | sed -e 's,_, ,g')"
    fi
}

function @c() {
    if [ -z "$1" ]; then
        curl cht.sh/:help | less
        return 1
    fi
    curl cht.sh/$1 | less
}

alias gmb='git merge-base @'

alias gnew='git checkout develop && gfa && git checkout -b'

alias dotfiles='code ~/code/dotfiles'

alias notes='code ~/code/notes'

alias c='cd $(find ~/code -maxdepth 2 -type d ! -name ".*" | fzf)'

# override common-aliases plugin duf alias: list all file sorted by size
function duf-fn() {
    du -cha -d 1 $@ | sort -hr
}
alias duf=duf-fn

alias sudomine="sudo chown -R $(whoami):$(whoami)"

# Rize Dev Tools
alias rize=~/code/rize/dev.sh
alias rz='cd ~/code/rize && rize'
alias rzc='code ~/code/rize'

# Valence Dev Tools
alias valence=~/code/valence/dev.sh
alias vl='cd ~/code/valence/coach && valence'
alias vlc='code ~/code/valence'

# ----------------- Cryptography ----------------- #
# encrypt / encode
function enc() {
    echo "$@" | openssl enc -kfile ~/code/m4s/infra/m4sdev_id_rsa -aes-256-ctr -pbkdf2 -a
}

# decrypt / decode
function dec() {
    openssl enc -kfile ~/code/m4s/infra/m4sdev_id_rsa -aes-256-ctr -pbkdf2 -a -d -
}
# ----------------- END Cryptography ----------------- #

# lol, the two commands Mac has going for it
if [ $XDG_SESSION_TYPE = "wayland" ]; then
  alias pbcopy='wl-copy'
  alias pbpaste='wl-paste'
else
  alias pbcopy='xclip -selection clipboard'
  alias pbpaste='xclip -selection clipboard -o'
fi

# download webpage
function web_archive() {
  if [ $# -eq 0 ]; then
    echo "Usage: web_archive [options] <url>"
    echo "Options:"
    echo "  -l [N]                  Limit the recursion depth"
    echo "  --domains=example.com   Limit the download to a specific domain"
    echo "  --span-hosts            Download files from other domains"
    return 1
  fi
  wget --recursive --no-clobber --convert-links --adjust-extension --page-requisites --no-parent "$@"
}
# Convert HTML to Markdown
function html-md() {
    pandoc -s -f html -t markdown --wrap=none $1
}

# View pretty Markdown in the terminal — hack that converts it to man pages format (groff)
function mdless() {
    pandoc -s -f markdown -t man --wrap=none $1 | man -l -
}


#               --------------------------------------                                  #
#               ------- Useful LLM Aliases -----------                                  #
#               --------------------------------------                                  #

alias llmfast='llm -m gemini/gemini-2.5-flash-preview-05-20'

alias lmreviewdiff='gd main...@ | llm -t code-review '

export DEFAULT_LLAMAFILE_MODEL="DeepSeek-Coder-V2-Lite-Instruct-Q4_K_M.gguf"
function llm-serve {
    model=${1:-$DEFAULT_LLAMAFILE_MODEL}
    echo "Starting LLM server with model $model"
    if docker inspect $model > /dev/null 2>&1; then
        docker start $model
    else
        docker run -d --runtime nvidia --gpus all -v ~/.cache/huggingface/hub:/models -p 8080:8080 --name $model ghcr.io/ggerganov/llama.cpp:server -ngl 99 -m "/models/$model"
    fi
    llm models default llamafile
    until [[ $(curl -s localhost:8080/health | jq -r '.status') == "ok" ]]; do
        sleep 1
    done
    echo "LLM server is ready"
}

# Start server if not started and pick between the models
function @l() {
    if [[ $(curl -s localhost:8080/health | jq -r '.status') != "ok" ]]; then
        llm-serve
    fi
    llm $@
}

# Ask LLM about a shell command and append it to history — buggy, we need to press enter to see the command in history
# this requires creating the cmd template
# `llm -s 'reply with the terminal command only, no extra information nor formatting' --save cmd`
function @cmd() {
    local output=`llm -t cmd $@`
    echo ": $(date +%s):0;$output" >> ~/.zsh_history
    echo $output
}

#               -----------------------------------                                     #
#               ------- END LLM Aliases -----------                                     #
#               -----------------------------------                                     #

#               ------- Useful Docker Aliases --------                                  #
#     https://gist.githubusercontent.com/jgrodziski/9ed4a17709baad10dbcd4530b60dfcbb/   #

function dc-fn {
        docker compose $*
}

alias dc=dc-fn
alias dps="docker ps"

#               ------- END Docker Aliases --------                                  #


# ------- Misc Functions -------

# Linux Bluetooth Utility
function restart_bluetooth() {
  sudo rmmod btusb
  sudo modprobe -r btusb
  sudo modprobe btusb
  sudo systemctl restart bluetooth
}

# Resize Images - e.g. resize_image inputfile.png 300 outputdir/
function resize_image() {
  mogrify -path $3 -filter Triangle -define filter:support=2 -thumbnail $2 -unsharp 0.25x0.08+8.3+0.045 -dither None -posterize 136 -quality 82 -define jpeg:fancy-upsampling=off -define png:compression-filter=5 -define png:compression-level=9 -define png:compression-strategy=1 -define png:exclude-chunk=all -interlace none -colorspace sRGB $1
}

# Resize and convert Videos to mp4 - e.g. resize_video inputfile.mkv
function resize_video() {
  ffmpeg -i $1 -vf "scale=iw/1.2:-1" -vcodec libx265 -crf 30 "${1%.*}_resized.mp4"
}

function convert_webm_to_mp4() {
  ffmpeg -i $1 -vf "scale=trunc(iw/2)*2:trunc(ih/2)*2" $1.mp4
}

# Resize PDFs - e.g. resize_pdf inputfile.pdf
function resize_pdf() {
  gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/ebook -dNOPAUSE -dQUIET -dBATCH -sOutputFile="${1%.*}_resized.pdf" $1
}

# Generate random string
function random_string() {
  if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    echo "Usage: random_string [length] [chars]"
    echo "  length: number of characters (default: 32)"
    echo "  chars: character class (default: alnum)"
    echo "    options: alnum, alpha, digit, lower, upper, punct, graph, print, etc"
    return 1
  fi
  local length=${1:-32}
  local chars=${2:-"alnum"}
  tr -cd "[:$chars:]" </dev/urandom | head -c $length
}

mouse_jiggler() {
  if [ "`uname`" = "Darwin" ]; then
    source ~/code/sandbox/.jiggler/bin/activate
    if [ $? -ne 0 ]; then
      cd ~/code/sandbox
      python3 -m venv .jiggler
      source ~/code/sandbox/.jiggler/bin/activate
      pip install jiggler
      cd -
    fi
    jiggler
    exit 1
  fi
  while true; do
    xdotool mousemove_relative 1 1
    sleep 30
    xdotool mousemove_relative -- -1 -1
    sleep 30
  done
}

dim_screen() {
  xrandr --output eDP-1 --brightness 0.1
}
# ------- END Functions -------
